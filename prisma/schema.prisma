// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String   @id @default(cuid())
  firebaseUid String   @unique
  email       String   @unique
  nom        String?
  phone       String?
  imageUrl    String?
  role        Role     @default(CLIENT)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  restaurant  Restaurant?
  deliveries  Delivery[]
  cart        Cart?
  adresses   Adresses[] // Ajout de la relation aux adresses
}

model Adresses {
  id        String   @id @default(cuid())
  rue    String
  ville      String
  etat     String?  // Région/État
  country   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id          String   @id @default(cuid())
  nom        String
  adresse     String
  phone       String
  imageUrl    String?
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String   @unique
  products    Product[]
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  nom      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id           String           @id @default(cuid())
  nom         String
  description  String?
  imageUrl     String?
  prixOriginal  Float
  restaurant   Restaurant       @relation(fields: [restaurantId], references: [id])
  restaurantId String
  category     Category?        @relation(fields: [categoryId], references: [id])
  categoryId   String?
  variants     ProductVariant[]
  orderItems   OrderItem[]
  cartItems     CartItem[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ProductVariant {
  id        String   @id @default(cuid())
  label      String?  // e.g., "30cl", "1.5L", "Normal", "Grand"
  prix     Float
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  cartItems   CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique // Un utilisateur a un seul panier
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantite  Int
  createdAt DateTime @default(now())
  
  @@unique([cartId, variantId]) // Empêche d'avoir deux fois le même variant dans le panier
}

model Order {
  id              String        @id @default(cuid())
  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId    String
  userId          String        // Corresponds to User id
  subTotal        Float         // Sous-total des articles
  deliveryFee     Float         // Frais de livraison
  total           Float         // Montant total (subTotal + deliveryFee)
  deliveryAddress String        // Snapshot de l'adresse de livraison
  paymentMethod   PaymentMethod // Méthode de paiement
  status          OrderStatus   @default(EN_ATTENTE)
  items           OrderItem[]
  delivery        Delivery?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  variant    String   // e.g., "1.5L"
  quantite   Int
  prix      Float
  createdAt  DateTime @default(now())
}

model Delivery {
  id          String         @id @default(cuid())
  order       Order          @relation(fields: [orderId], references: [id])
  orderId     String         @unique
  deliverer   User?          @relation(fields: [delivererId], references: [id])
  delivererId String?
  status      DeliveryStatus @default(EN_ATTENTE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum Role {
  ADMIN
  RESTAURATEUR
  LIVREUR
  CLIENT
}

enum PaymentMethod {
  CASH_ON_DELIVERY
}

enum OrderStatus {
  EN_ATTENTE
  EN_PREPARATION
  PRET
  LIVRER
  ANNULER
}

enum DeliveryStatus {
  EN_ATTENTE
  ASSIGNER
  EN_TRANSIT
  LIVRER
  ECHEC
}